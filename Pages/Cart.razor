@page "/cart"
@using System.Diagnostics;
@inject CoffeeServices CoffeeServices
@inject OrderItemServices OrderItemServices
@inject AddInsServices AddInsServices
@inject NavigationManager NavigationManager
@inject CustomerService CustomerService


@if (_message != "")
{
    <MudAlert Severity="Severity.Error">@_message</MudAlert>
}

<MudTable Items="@Elements"
          Dense=true
          Hover=true
          Bordered=true
          Striped=true>

    <ToolBarContent>
        <MudText Typo="Typo.h6">Cart</MudText>
        
        
    </ToolBarContent>
  

    <HeaderContent>
        <MudTh>Item Name</MudTh>
        <MudTh>Item Type</MudTh>
        <MudTh>Price</MudTh>
        <MudTh>Quantity</MudTh>
        <MudTh>Total</MudTh>
        <MudTh>Action</MudTh>
    </HeaderContent>

    <RowTemplate>
        <MudTd DataLabel="Item Name">@context.Name</MudTd>
        <MudTd DataLabel="Item Type">@context.ItemType</MudTd>
        <MudTd DataLabel="Price">Rs.@context.Price</MudTd>

        <MudTd DataLabel="Quantity">

            <MudIconButton Icon="@Icons.Material.Filled.Remove" aria-label="subtract" OnClick="@(() => QuantityUpdate(context.OrderItemID, "sub"))"></MudIconButton>

            <span>
                @context.Quantity
            </span>

            <MudIconButton Icon="@Icons.Material.Filled.Add" aria-label="add" OnClick="@(() => QuantityUpdate(context.OrderItemID, "add"))"></MudIconButton>


        </MudTd>

        <MudTd DataLabel="Price">Rs.@context.TotalPrice</MudTd>
        <MudTd DataLabel="Action">
            <MudIconButton Color="Color.Error" Icon="@Icons.Material.Filled.Delete" aria-label="delete" OnClick="@(() => handleDeleteCartItem(context.OrderItemID))"></MudIconButton>
        </MudTd>
    </RowTemplate>

    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>
<MudSpacer />
<MudText Typo="Typo.subtitle1">Total Price: <b>Rs.@_totalAmount</b></MudText>
<MudTextField @bind-Value="phone" Label="Phone" Variant="Variant.Outlined"></MudTextField>

<div class="mt-5">
    <MudButton Variant="Variant.Filled"  OnClick="clearAllCartData">Clear Cart</MudButton>
    <MudButton Variant="Variant.Filled" OnClick="customerExistCheck" Color="Color.Primary">Checkout</MudButton>
</div>



@code {
    [CascadingParameter]
    private GlobalState _globalState { set; get; }

    private string phone { set; get; }
    private string _message { set; get; } = "";


    private double _totalAmount { set; get; } = 0;


    private IEnumerable<OrderItem> Elements = new List<OrderItem>();

    private Coffee _coffee { set; get; }
    //calculate the total amount of the cart
    private double calculateTotalAmount()
    {
        double totalAmount = 0;
        //calculate the total amount from the list OrderList data.
        foreach (var item in Elements)
        {
            totalAmount += item.TotalPrice;
        }
        return totalAmount;
    }
    //remove the existing data
    private void clearAllCartData()
    {
        _globalState.OrderItems.Clear();
        _totalAmount = calculateTotalAmount();
        _message = "";
    }

    private void handleDeleteCartItem(Guid orderItemID)
    {
        OrderItemServices.DeleteItemInOrderItemsList(_globalState.OrderItems, orderItemID);
        _totalAmount = calculateTotalAmount();
    }
    //Code to update the quantity of the item using add or subtract
    private void QuantityUpdate(Guid orderItemID, string action)
    {
        OrderItemServices.QuantityOfItemList(_globalState.OrderItems, orderItemID, action);
        _totalAmount = calculateTotalAmount();
    }

    protected override void OnInitialized()
    {
        Elements = _globalState.OrderItems;
        _globalState.AppBarTitle = "Cart";
        _totalAmount = calculateTotalAmount();
    }

    private void customerExistCheck()
    {
        if (_globalState.OrderItems.Count() == 0)
        {
            _message = "Cart Is Empty!!!";
            return;
        }
        if (string.IsNullOrEmpty(phone))
        {
            _message = "Please provide Phone Number";
            return;
        }
        Customer customer = CustomerService.getCustomerFromPhone(phone);
        if(customer == null)
        {
            NavigationManager.NavigateTo("/register");
        }
        else
        {
            NavigationManager.NavigateTo($"/bill/{customer.Phone}");
        }
    }


}